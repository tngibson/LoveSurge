//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Whole Game"",
            ""id"": ""99c197f4-8b4f-4019-ab25-e1717d20372b"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""281661b4-c172-40fd-b261-b67ae0bf09a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e3bd8fff-e530-480d-98bf-6392bebc69c3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MnK"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MnK"",
            ""bindingGroup"": ""MnK"",
            ""devices"": []
        }
    ]
}");
        // Whole Game
        m_WholeGame = asset.FindActionMap("Whole Game", throwIfNotFound: true);
        m_WholeGame_Exit = m_WholeGame.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Whole Game
    private readonly InputActionMap m_WholeGame;
    private List<IWholeGameActions> m_WholeGameActionsCallbackInterfaces = new List<IWholeGameActions>();
    private readonly InputAction m_WholeGame_Exit;
    public struct WholeGameActions
    {
        private @Controls m_Wrapper;
        public WholeGameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_WholeGame_Exit;
        public InputActionMap Get() { return m_Wrapper.m_WholeGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WholeGameActions set) { return set.Get(); }
        public void AddCallbacks(IWholeGameActions instance)
        {
            if (instance == null || m_Wrapper.m_WholeGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WholeGameActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IWholeGameActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IWholeGameActions instance)
        {
            if (m_Wrapper.m_WholeGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWholeGameActions instance)
        {
            foreach (var item in m_Wrapper.m_WholeGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WholeGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WholeGameActions @WholeGame => new WholeGameActions(this);
    private int m_MnKSchemeIndex = -1;
    public InputControlScheme MnKScheme
    {
        get
        {
            if (m_MnKSchemeIndex == -1) m_MnKSchemeIndex = asset.FindControlSchemeIndex("MnK");
            return asset.controlSchemes[m_MnKSchemeIndex];
        }
    }
    public interface IWholeGameActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
}
